type Query {
  comments(query: String): [Comment!]!
  posts(query: String): [Post!]!
  users(query: String): [User!]!
  user(id: ID!): User!
  post(id: ID!): Post!
  me: User!
  myPosts(query: String): [Post!]!
}

type Mutation {
  createComment(data: CreateCommentInput!): Comment!
  updateComment(id: ID!, data: UpdateCommentInput!): Comment!
  deleteComment(id: ID!): Int!
  createPost(data: CreatePostInput!): Post!
  updatePost(id: ID!, data: UpdatePostInput!): Post!
  deletePost(id: ID!): Int!
  signup(data: SignupUserInput!): AuthPayload!
  login(data: LoginUserInput!): AuthPayload!
  updateProfile(data: UpdateProfileInput!): User!
  updateEmail(data: UpdateEmailInput): AuthPayload!
  updatePassword(data: UpdatePasswordInput): AuthPayload!
  deleteAccount: Int!
}

type Subscription {
  comment(post: ID!): CommentSubscriptionPayload!
  post: PostSubscriptionPayload!
}

scalar DateTime

scalar EmailAddress

scalar UnsignedInt

type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
  createdAt: DateTime!
  updatedAt: DateTime!
  version: Int!
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  version: Int!
}

type User {
  id: ID!
  name: String!
  email: EmailAddress!
  age: UnsignedInt
  posts: [Post!]!
  comments: [Comment!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  version: Int!
}

input CreateCommentInput {
  text: String!
  post: ID!
}

input UpdateCommentInput {
  text: String
}

input CreatePostInput {
  title: String!
  body: String!
  published: Boolean!
}

input UpdatePostInput {
  title: String
  body: String
  published: Boolean
}

input SignupUserInput {
  name: String!
  email: EmailAddress!
  password: String!
  age: UnsignedInt
}

input LoginUserInput {
  email: EmailAddress!
  password: String!
}

input UpdateProfileInput {
  name: String
  age: UnsignedInt
}

input UpdateEmailInput {
  email: EmailAddress!
  currentPassword: String!
}

input UpdatePasswordInput {
  currentPassword: String!
  newPassword: String!
  confirmPassword: String!
}

type AuthPayload {
    token: String!
    user: User!
}

type CommentSubscriptionPayload {
  mutation: String!
  data: Comment!
}

type PostSubscriptionPayload {
  mutation: String!
  data: Post!
}